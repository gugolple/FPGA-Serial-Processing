-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fun is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_EN_A : OUT STD_LOGIC;
    a_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    a_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    a_Clk_A : OUT STD_LOGIC;
    a_Rst_A : OUT STD_LOGIC;
    b_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_EN_A : OUT STD_LOGIC;
    b_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    b_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    b_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    b_Clk_A : OUT STD_LOGIC;
    b_Rst_A : OUT STD_LOGIC );
end;


architecture behav of fun is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fun,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7s25-csga225-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.238000,HLS_SYN_LAT=1057,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=85,HLS_SYN_LUT=286,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv8_F6 : STD_LOGIC_VECTOR (7 downto 0) := "11110110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal shl_ln_fu_177_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_reg_294 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln14_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln41_fu_193_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln41_reg_299 : STD_LOGIC_VECTOR (7 downto 0);
    signal res_fu_212_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal res_reg_307 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln16_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_217_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal cont_reg_327 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal a_load_reg_337 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal a_load_1_reg_347 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln23_2_fu_263_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln23_2_reg_357 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal cont_1_fu_272_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal cont_1_reg_362 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal j_fu_285_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal y_assign_reg_122 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_assign_reg_134 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_cont_0_phi_fu_151_p12 : STD_LOGIC_VECTOR (7 downto 0);
    signal cont_0_reg_146 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln20_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_fu_238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_fu_281_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal b_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln41_1_fu_185_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln16_fu_197_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_fu_207_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln20_fu_223_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln21_fu_233_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln22_fu_243_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln23_fu_253_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln23_1_fu_268_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    cont_0_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((cont_1_fu_272_p2 = ap_const_lv8_4)) and not((cont_1_fu_272_p2 = ap_const_lv8_3)) and not((cont_1_fu_272_p2 = ap_const_lv8_1)) and not((cont_1_fu_272_p2 = ap_const_lv8_0)) and not((cont_1_fu_272_p2 = ap_const_lv8_2)) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                cont_0_reg_146 <= cont_1_fu_272_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (cont_1_fu_272_p2 = ap_const_lv8_3))) then 
                cont_0_reg_146 <= ap_const_lv8_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (cont_1_reg_362 = ap_const_lv8_2))) then 
                cont_0_reg_146 <= a_Dout_A;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state9) and (cont_1_fu_272_p2 = ap_const_lv8_4)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (cont_1_fu_272_p2 = ap_const_lv8_1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (cont_1_fu_272_p2 = ap_const_lv8_0)))) then 
                cont_0_reg_146 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    x_assign_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_171_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                x_assign_reg_134 <= ap_const_lv4_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                x_assign_reg_134 <= j_fu_285_p2;
            end if; 
        end if;
    end process;

    y_assign_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_201_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                y_assign_reg_122 <= i_fu_217_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                y_assign_reg_122 <= ap_const_lv5_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                a_load_1_reg_347 <= a_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                a_load_reg_337 <= a_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln23_2_reg_357 <= add_ln23_2_fu_263_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                cont_1_reg_362 <= cont_1_fu_272_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                cont_reg_327 <= a_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_201_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                res_reg_307 <= res_fu_212_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_171_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln_reg_294(7 downto 3) <= shl_ln_fu_177_p3(7 downto 3);
                    zext_ln41_reg_299(5 downto 1) <= zext_ln41_fu_193_p1(5 downto 1);
            end if;
        end if;
    end process;
    shl_ln_reg_294(2 downto 0) <= "000";
    zext_ln41_reg_299(0) <= '0';
    zext_ln41_reg_299(7 downto 6) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln14_fu_171_p2, ap_CS_fsm_state3, icmp_ln16_fu_201_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln14_fu_171_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln16_fu_201_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    a_Addr_A <= std_logic_vector(shift_left(unsigned(a_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));

    a_Addr_A_orig_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9, zext_ln20_fu_228_p1, zext_ln21_fu_238_p1, zext_ln22_fu_248_p1, zext_ln23_fu_258_p1, zext_ln28_fu_277_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            a_Addr_A_orig <= zext_ln28_fu_277_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            a_Addr_A_orig <= zext_ln23_fu_258_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            a_Addr_A_orig <= zext_ln22_fu_248_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_Addr_A_orig <= zext_ln21_fu_238_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_Addr_A_orig <= zext_ln20_fu_228_p1(32 - 1 downto 0);
        else 
            a_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_Clk_A <= ap_clk;
    a_Din_A <= ap_const_lv8_0;

    a_EN_A_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            a_EN_A <= ap_const_logic_1;
        else 
            a_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_Rst_A <= ap_rst;
    a_WEN_A <= ap_const_lv1_0;
    add_ln20_fu_223_p2 <= std_logic_vector(unsigned(res_reg_307) + unsigned(ap_const_lv8_F6));
    add_ln21_fu_233_p2 <= std_logic_vector(unsigned(res_reg_307) + unsigned(ap_const_lv8_FF));
    add_ln22_fu_243_p2 <= std_logic_vector(unsigned(res_reg_307) + unsigned(ap_const_lv8_1));
    add_ln23_1_fu_268_p2 <= std_logic_vector(unsigned(cont_reg_327) + unsigned(a_load_1_reg_347));
    add_ln23_2_fu_263_p2 <= std_logic_vector(unsigned(a_load_reg_337) + unsigned(a_Dout_A));
    add_ln23_fu_253_p2 <= std_logic_vector(unsigned(res_reg_307) + unsigned(ap_const_lv8_A));
    add_ln41_fu_207_p2 <= std_logic_vector(unsigned(shl_ln_reg_294) + unsigned(zext_ln16_fu_197_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln14_fu_171_p2)
    begin
        if (((icmp_ln14_fu_171_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_cont_0_phi_fu_151_p12_assign_proc : process(a_Dout_A, cont_1_reg_362, ap_CS_fsm_state10, cont_0_reg_146)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (cont_1_reg_362 = ap_const_lv8_2))) then 
            ap_phi_mux_cont_0_phi_fu_151_p12 <= a_Dout_A;
        else 
            ap_phi_mux_cont_0_phi_fu_151_p12 <= cont_0_reg_146;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln14_fu_171_p2)
    begin
        if (((icmp_ln14_fu_171_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_Addr_A <= std_logic_vector(shift_left(unsigned(b_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    b_Addr_A_orig <= zext_ln32_fu_281_p1(32 - 1 downto 0);
    b_Clk_A <= ap_clk;
    b_Din_A <= ap_phi_mux_cont_0_phi_fu_151_p12;

    b_EN_A_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            b_EN_A <= ap_const_logic_1;
        else 
            b_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    b_Rst_A <= ap_rst;

    b_WEN_A_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            b_WEN_A <= ap_const_lv1_1;
        else 
            b_WEN_A <= ap_const_lv1_0;
        end if; 
    end process;

    cont_1_fu_272_p2 <= std_logic_vector(unsigned(add_ln23_2_reg_357) + unsigned(add_ln23_1_fu_268_p2));
    i_fu_217_p2 <= std_logic_vector(unsigned(y_assign_reg_122) + unsigned(ap_const_lv5_1));
    icmp_ln14_fu_171_p2 <= "1" when (y_assign_reg_122 = ap_const_lv5_11) else "0";
    icmp_ln16_fu_201_p2 <= "1" when (x_assign_reg_134 = ap_const_lv4_9) else "0";
    j_fu_285_p2 <= std_logic_vector(unsigned(x_assign_reg_134) + unsigned(ap_const_lv4_1));
    res_fu_212_p2 <= std_logic_vector(unsigned(add_ln41_fu_207_p2) + unsigned(zext_ln41_reg_299));
    shl_ln41_1_fu_185_p3 <= (y_assign_reg_122 & ap_const_lv1_0);
    shl_ln_fu_177_p3 <= (y_assign_reg_122 & ap_const_lv3_0);
    zext_ln16_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_assign_reg_134),8));
    zext_ln20_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_fu_223_p2),64));
    zext_ln21_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_fu_233_p2),64));
    zext_ln22_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln22_fu_243_p2),64));
    zext_ln23_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_fu_253_p2),64));
    zext_ln28_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(res_reg_307),64));
    zext_ln32_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(res_reg_307),64));
    zext_ln41_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln41_1_fu_185_p3),8));
end behav;
