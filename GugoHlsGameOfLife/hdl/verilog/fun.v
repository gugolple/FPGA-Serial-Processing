// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fun,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7s25-csga225-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.238000,HLS_SYN_LAT=1057,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=85,HLS_SYN_LUT=286,HLS_VERSION=2020_1}" *)

module fun (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_Addr_A,
        a_EN_A,
        a_WEN_A,
        a_Din_A,
        a_Dout_A,
        a_Clk_A,
        a_Rst_A,
        b_Addr_A,
        b_EN_A,
        b_WEN_A,
        b_Din_A,
        b_Dout_A,
        b_Clk_A,
        b_Rst_A
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] a_Addr_A;
output   a_EN_A;
output  [0:0] a_WEN_A;
output  [7:0] a_Din_A;
input  [7:0] a_Dout_A;
output   a_Clk_A;
output   a_Rst_A;
output  [31:0] b_Addr_A;
output   b_EN_A;
output  [0:0] b_WEN_A;
output  [7:0] b_Din_A;
input  [7:0] b_Dout_A;
output   b_Clk_A;
output   b_Rst_A;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_EN_A;
reg b_EN_A;
reg[0:0] b_WEN_A;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] shl_ln_fu_177_p3;
reg   [7:0] shl_ln_reg_294;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln14_fu_171_p2;
wire   [7:0] zext_ln41_fu_193_p1;
reg   [7:0] zext_ln41_reg_299;
wire   [7:0] res_fu_212_p2;
reg   [7:0] res_reg_307;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln16_fu_201_p2;
wire   [4:0] i_fu_217_p2;
wire    ap_CS_fsm_state4;
reg   [7:0] cont_reg_327;
wire    ap_CS_fsm_state5;
reg   [7:0] a_load_reg_337;
wire    ap_CS_fsm_state6;
reg   [7:0] a_load_1_reg_347;
wire    ap_CS_fsm_state7;
wire   [7:0] add_ln23_2_fu_263_p2;
reg   [7:0] add_ln23_2_reg_357;
wire    ap_CS_fsm_state8;
wire   [7:0] cont_1_fu_272_p2;
reg   [7:0] cont_1_reg_362;
wire    ap_CS_fsm_state9;
wire   [3:0] j_fu_285_p2;
wire    ap_CS_fsm_state10;
reg   [4:0] y_assign_reg_122;
reg   [3:0] x_assign_reg_134;
reg   [7:0] ap_phi_mux_cont_0_phi_fu_151_p12;
reg   [7:0] cont_0_reg_146;
wire   [63:0] zext_ln20_fu_228_p1;
wire   [63:0] zext_ln21_fu_238_p1;
wire   [63:0] zext_ln22_fu_248_p1;
wire   [63:0] zext_ln23_fu_258_p1;
wire   [63:0] zext_ln28_fu_277_p1;
wire   [63:0] zext_ln32_fu_281_p1;
reg   [31:0] a_Addr_A_orig;
wire   [31:0] b_Addr_A_orig;
wire   [5:0] shl_ln41_1_fu_185_p3;
wire   [7:0] zext_ln16_fu_197_p1;
wire   [7:0] add_ln41_fu_207_p2;
wire   [7:0] add_ln20_fu_223_p2;
wire   [7:0] add_ln21_fu_233_p2;
wire   [7:0] add_ln22_fu_243_p2;
wire   [7:0] add_ln23_fu_253_p2;
wire   [7:0] add_ln23_1_fu_268_p2;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~(cont_1_fu_272_p2 == 8'd4) & ~(cont_1_fu_272_p2 == 8'd3) & ~(cont_1_fu_272_p2 == 8'd1) & ~(cont_1_fu_272_p2 == 8'd0) & ~(cont_1_fu_272_p2 == 8'd2) & (1'b1 == ap_CS_fsm_state9))) begin
        cont_0_reg_146 <= cont_1_fu_272_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) & (cont_1_fu_272_p2 == 8'd3))) begin
        cont_0_reg_146 <= 8'd1;
    end else if (((1'b1 == ap_CS_fsm_state10) & (cont_1_reg_362 == 8'd2))) begin
        cont_0_reg_146 <= a_Dout_A;
    end else if ((((1'b1 == ap_CS_fsm_state9) & (cont_1_fu_272_p2 == 8'd4)) | ((1'b1 == ap_CS_fsm_state9) & (cont_1_fu_272_p2 == 8'd1)) | ((1'b1 == ap_CS_fsm_state9) & (cont_1_fu_272_p2 == 8'd0)))) begin
        cont_0_reg_146 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_171_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        x_assign_reg_134 <= 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        x_assign_reg_134 <= j_fu_285_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        y_assign_reg_122 <= i_fu_217_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        y_assign_reg_122 <= 5'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        a_load_1_reg_347 <= a_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        a_load_reg_337 <= a_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln23_2_reg_357 <= add_ln23_2_fu_263_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cont_1_reg_362 <= cont_1_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cont_reg_327 <= a_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        res_reg_307 <= res_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_171_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shl_ln_reg_294[7 : 3] <= shl_ln_fu_177_p3[7 : 3];
        zext_ln41_reg_299[5 : 1] <= zext_ln41_fu_193_p1[5 : 1];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        a_Addr_A_orig = zext_ln28_fu_277_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        a_Addr_A_orig = zext_ln23_fu_258_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        a_Addr_A_orig = zext_ln22_fu_248_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        a_Addr_A_orig = zext_ln21_fu_238_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        a_Addr_A_orig = zext_ln20_fu_228_p1;
    end else begin
        a_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7))) begin
        a_EN_A = 1'b1;
    end else begin
        a_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_171_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (cont_1_reg_362 == 8'd2))) begin
        ap_phi_mux_cont_0_phi_fu_151_p12 = a_Dout_A;
    end else begin
        ap_phi_mux_cont_0_phi_fu_151_p12 = cont_0_reg_146;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_171_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        b_EN_A = 1'b1;
    end else begin
        b_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        b_WEN_A = 1'd1;
    end else begin
        b_WEN_A = 1'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln14_fu_171_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln16_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_Addr_A = a_Addr_A_orig << 32'd0;

assign a_Clk_A = ap_clk;

assign a_Din_A = 8'd0;

assign a_Rst_A = ap_rst;

assign a_WEN_A = 1'd0;

assign add_ln20_fu_223_p2 = ($signed(res_reg_307) + $signed(8'd246));

assign add_ln21_fu_233_p2 = ($signed(res_reg_307) + $signed(8'd255));

assign add_ln22_fu_243_p2 = (res_reg_307 + 8'd1);

assign add_ln23_1_fu_268_p2 = (cont_reg_327 + a_load_1_reg_347);

assign add_ln23_2_fu_263_p2 = (a_load_reg_337 + a_Dout_A);

assign add_ln23_fu_253_p2 = (res_reg_307 + 8'd10);

assign add_ln41_fu_207_p2 = (shl_ln_reg_294 + zext_ln16_fu_197_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign b_Addr_A = b_Addr_A_orig << 32'd0;

assign b_Addr_A_orig = zext_ln32_fu_281_p1;

assign b_Clk_A = ap_clk;

assign b_Din_A = ap_phi_mux_cont_0_phi_fu_151_p12;

assign b_Rst_A = ap_rst;

assign cont_1_fu_272_p2 = (add_ln23_2_reg_357 + add_ln23_1_fu_268_p2);

assign i_fu_217_p2 = (y_assign_reg_122 + 5'd1);

assign icmp_ln14_fu_171_p2 = ((y_assign_reg_122 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_201_p2 = ((x_assign_reg_134 == 4'd9) ? 1'b1 : 1'b0);

assign j_fu_285_p2 = (x_assign_reg_134 + 4'd1);

assign res_fu_212_p2 = (add_ln41_fu_207_p2 + zext_ln41_reg_299);

assign shl_ln41_1_fu_185_p3 = {{y_assign_reg_122}, {1'd0}};

assign shl_ln_fu_177_p3 = {{y_assign_reg_122}, {3'd0}};

assign zext_ln16_fu_197_p1 = x_assign_reg_134;

assign zext_ln20_fu_228_p1 = add_ln20_fu_223_p2;

assign zext_ln21_fu_238_p1 = add_ln21_fu_233_p2;

assign zext_ln22_fu_248_p1 = add_ln22_fu_243_p2;

assign zext_ln23_fu_258_p1 = add_ln23_fu_253_p2;

assign zext_ln28_fu_277_p1 = res_reg_307;

assign zext_ln32_fu_281_p1 = res_reg_307;

assign zext_ln41_fu_193_p1 = shl_ln41_1_fu_185_p3;

always @ (posedge ap_clk) begin
    shl_ln_reg_294[2:0] <= 3'b000;
    zext_ln41_reg_299[0] <= 1'b0;
    zext_ln41_reg_299[7:6] <= 2'b00;
end

endmodule //fun
